[{"content":" The following information is provided as a cut-and-paste resource for conference organizers, media professionals, podcast hosts, and other interested parties.\nPlease feel free to use anything here as-is without checking with me first. If you have additional questions, you can email me directly.\nJump to\u0026hellip; Short Bio Common Topics Sample Questions Random Facts Short Bio Raj Duggal is a highly experienced software development consultant who is on a mission to help teams align their processes and practices with the fundamentals of agile software development. He is the author of the Agile Missing Manual website, and writes a free daily email newsletter on how to build software using the agile approach.\nCommon Topics How To Write Needed Technical Work As User Stories. How To Maintain A High Level Of Code Quality. How To Stop \u0026ldquo;Sprint Goals\u0026rdquo; From Causing Bottlenecks. How To Run Stand Up Meetings. How To Handle Work That Wasn\u0026rsquo;t Completed Within The Sprint. How To Make A Cross Functional Team How To Handle Technical Debt How To Capture and Record Details Specs and Requirements. Sample Questions for Raj What is the difference between Scrum and Agile? How does a project manager fit in an agile team? What are the roles of QA and Business Analysts in an agile team? What kind of projects aren\u0026rsquo;t well suited to Agile? Why do so many developers not like agile? Why is it important to keep User Stories very short? Random Facts About Raj I was born and raised in UK, and migrated to Toronto as a teenager. I recently started learning Bachata dancing. I started teaching my two children linux and vim when they were five years old. More words from Raj Visit Raj’s main site at RajDuggal.com Visit Raj’s agile website at AgileMissingManual.com Subscribe to Raj’s daily mailing list at AgileTechies.com ","permalink":"https://RajDuggal.com/about/","summary":"\u003cdiv class=\"profile\"\u003e\n    \u003cimg style=\"border-radius: 50%\" draggable=\"false\" src=\"https://RajDuggal.com/images/main.jpg\" alt=\"Raj Duggal\" title=\"Raj Duggal\"\n            height=\"150\" width=\"150\" /\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe following information is provided as a cut-and-paste resource for conference organizers, media professionals, podcast hosts, and other interested parties.\u003c/p\u003e\n\u003cp\u003ePlease feel free to use anything here as-is without checking with me first. If you have additional questions, you can email me directly.\u003c/p\u003e\n\u003ch3 id=\"jump-to\"\u003eJump to\u0026hellip;\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#short-bio\"\u003eShort Bio\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#common-topics\"\u003eCommon Topics\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#sample-questions\"\u003eSample Questions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#random-facts\"\u003eRandom Facts\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"short-bio\"\u003eShort Bio\u003c/h2\u003e\n\u003cp\u003eRaj Duggal is a highly experienced software development consultant who is on a mission to help teams align their processes and practices with the fundamentals of agile software development. He is the author of the Agile Missing Manual website, and writes a free daily email newsletter on how to build software using the agile approach.\u003c/p\u003e","title":"About Raj"},{"content":"As a software development coach, I frequently hear team members say, \u0026ldquo;But, I\u0026rsquo;m not a Software Developer,\u0026rdquo; whenever I ask them to engage in technical tasks. While this may seem like a reasonable defense, it often reflects a limiting mindset. It’s not that they lack the capability, but rather that the term \u0026ldquo;Software Developer\u0026rdquo; has become synonymous with \u0026ldquo;Computer Programmer\u0026rdquo; in their minds—creating a division where none should exist.\nIn reality, whether someone writes code all day or contributes in other ways, we\u0026rsquo;re all \u0026ldquo;Software Builders.\u0026rdquo; And as Software Builders, everyone plays a role in building something bigger than individual tasks. To do this efficiently, we need to embrace a wider set of technical skills, not just the ones traditionally tied to programming.\nThe Role of the \u0026ldquo;Software Builder\u0026rdquo; Being a Software Builder doesn’t mean you need to become a full-time coder. It’s about understanding that building software requires more than just programming; it’s about solving problems, streamlining processes, and contributing to the overall success of the product.\nHere’s why this matters: many technical tasks directly enable team members to do their jobs better, even if they aren\u0026rsquo;t the ones writing business logic or creating UI components. Tasks such as version control, setting up local environments, and seeding databases are fundamental enablers that let us work smarter, faster, and more independently.\nGetting Comfortable with Technical Tasks Let’s look at a few examples of technical tasks that are often outside the \u0026ldquo;comfort zone\u0026rdquo; but can significantly improve workflow for non-developers.\n1. Git Version Control System Understanding the basics of Git, for instance, is not just for software developers. It allows team members to track changes, collaborate more effectively, and ensure that no work is lost or overwritten. Learning how to install Git, clone repositories, and manage simple commits can go a long way toward making everyone on the team more self-sufficient.\nGit is often seen as the developer\u0026rsquo;s tool, but it’s really about collaboration. By learning its basics, even non-developers can review code changes, help track issues, and better understand the impact of the work being done.\n2. Installing and Seeding a Database Setting up and seeding a database might sound technical, but think about the benefits of being able to create and manipulate your own data sets locally. Without having to rely on a shared test server, you can experiment, troubleshoot, and better understand how the software behaves under different conditions.\nThis isn’t about replacing the developers’ role—it’s about creating freedom for non-developers to play, test, and explore on their own terms. It accelerates problem-solving and allows for quicker iterations, rather than waiting for the technical bottleneck to clear.\n3. Working with API Tools (e.g., Postman) Non-programmers, especially product managers or QA testers, may need to test APIs to verify how different parts of the system interact or to ensure that a feature works as expected. Learning how to use tools like Postman to send requests to APIs and inspect responses is a valuable skill. This allows team members to independently test integrations, debug issues, or check data flows without involving developers.\n4. Basic Command Line Usage Having a basic understanding of the command line can be incredibly useful, especially when working with version control systems like Git or when managing databases. Common tasks include navigating the file system, running simple scripts, or interacting with remote servers. This knowledge can also help with troubleshooting environment setup issues and running automation tools.\n5. Automated Testing Frameworks (e.g., Selenium, Cypress) For QA engineers or testers, learning how to run automated tests is essential. Using tools like Selenium or Cypress to automate the testing of web applications can save significant time and improve the accuracy of regression testing. Non-programmers may not need to write complex test scripts, but understanding how to execute them, interpret results, and troubleshoot test failures can enhance their ability to support the development process.\n6. Using Database Query Tools (e.g., SQL) Being able to run simple SQL queries on a database to fetch, insert, or update data can be invaluable for product managers, testers, or data analysts. By learning basic SQL, non-programmers can gather insights, validate data, and troubleshoot issues without relying entirely on developers. This can also help them verify that features work as intended or track down bugs related to data.\n7. Managing Environment Variables and Config Files Non-developers may need to configure applications, whether it’s changing environment variables or modifying config files. For example, setting up a local development server may require editing configuration files (such as .env files) to connect to the right database, APIs, or services. Understanding how to manage these variables ensures that the application runs properly and integrates with other systems.\n8. Setting Up Virtual Machines or Cloud Instances If your team is working with cloud infrastructure (e.g., AWS, Azure, Google Cloud), non-programmers might need to set up or manage virtual machines or cloud instances. Learning how to spin up cloud servers, connect to them, and manage resources can be useful for those working in product management, testing, or even customer support, where understanding the infrastructure is essential for troubleshooting or delivering new features.\n9. Running Build and Deployment Scripts Non-programmers may need to understand and run build or deployment scripts, especially when dealing with continuous integration/continuous deployment (CI/CD) pipelines. Learning how to trigger builds, deploy applications to test environments, and monitor the status of deployments can help them contribute more efficiently, especially in Agile teams where quick feedback is critical.\n10. Reading and Understanding Log Files Being able to read and interpret log files is crucial for identifying and diagnosing issues. Non-programmers, particularly testers or support staff, can benefit from understanding how to locate logs and recognize patterns that may indicate software errors, performance issues, or unexpected behavior. This knowledge can help them provide developers with better insights when reporting bugs or user issues.\nWhy This Shift Matters When we expand the definition of what it means to be a Software Builder, it opens the door to a mindset of ownership and accountability. Technical tasks are no longer \u0026ldquo;someone else\u0026rsquo;s job\u0026rdquo;; instead, they become tools that empower us to be more effective in our roles.\nFor product managers, designers, QA testers, or even support teams, the ability to install a local environment or tweak a configuration file can be incredibly liberating. It removes roadblocks and helps everyone contribute to the success of the project in more direct and meaningful ways.\nEmbracing Continuous Learning To shift from \u0026ldquo;I’m not a Software Developer\u0026rdquo; to \u0026ldquo;I’m a Software Builder,\u0026rdquo; teams need to adopt a culture of continuous learning. This doesn’t mean everyone needs to dive into complex algorithms, but it does mean that we should all be willing to expand our technical knowledge to become better at our jobs.\nAs Software Builders, we should ask ourselves: What tools can I learn that will help me contribute more effectively? How can I gain more independence in my role? These questions lead to a more capable, adaptable team—one that can tackle challenges without needing to wait for the \u0026ldquo;technical\u0026rdquo; folks to swoop in.\nConclusion If you’re on a software team, whether you’re writing code or not, you are a Software Builder. Embrace that title, because it reflects the reality that building software is a collaborative effort that goes beyond just programming. By learning the technical skills that enable you to do your job better, you’ll not only improve your own workflow, but you’ll also help the entire team become more efficient and successful.\nThe next time you find yourself thinking, \u0026ldquo;But I’m not a Software Developer,\u0026rdquo; remember—being a Software Builder is about more than just writing code. It’s about having the right tools and knowledge to solve problems, improve efficiency, and contribute to the building of great software.\n","permalink":"https://RajDuggal.com/articles/but-im-not-a-software-developer/","summary":"\u0026ldquo;But I\u0026rsquo;m Not a Software Developer\u0026rdquo; - A Mindset Shift for Team Success","title":"But I'm Not a Software Developer"},{"content":"Chrome and Edge have a built in tool called Lighthouse which can audit the web page you\u0026rsquo;re visiting in both desktop browser and mobile browser modes.\nThere\u0026rsquo;s an Lighthouse add-on available for Firefox.\nSorry, Safari browser users will need to find another tool for this job.\nStep 1: Open the built in Developer Tools Open your Google Chrome or Microsoft Edge browser Visit the web page that you want to analyze. In the top-right corner, click the gray icon that contains a line of three dots. Click \u0026ldquo;More tools\u0026rdquo;. Click \u0026ldquo;Developer Tools\u0026rdquo;. Step 2: Open the Lighthouse tab If you\u0026rsquo;re using Edge look for the \u0026ldquo;Lighthouse\u0026rdquo; tool in your activity bar. It will either say \u0026ldquo;Lighthouse\u0026rdquo; or it might be displayed as a lighthouse icon. If it\u0026rsquo;s missing, you will need to add it to your Activity Bar by clicking the plus icon and then click \u0026ldquo;Lighthouse\u0026rdquo;. If you\u0026rsquo;re using Chrome and you don\u0026rsquo;t see Lighthouse, click the icon with two arrows pointing towards the right to find it. You will know you have the Lighthouse tab displayed and active when the Lighthouse tab is underlined and in a blue font colour. Like this\u0026hellip; Step 3: Configure the test report Under the Category section, only select the \u0026ldquo;Accessibility\u0026rdquo; checkbox and uncheck the others. Choose to generate the report for either how the web page will be displayed in \u0026ldquo;Desktop\u0026rdquo; computer mode, or \u0026ldquo;Mobile\u0026rdquo; phone mode. Click the \u0026ldquo;Analyze page load\u0026rdquo; button to generate your report. Step 4: Enjoy the report! Check your audit score\u0026hellip;\nDid it score 100%?\nYipee!\nWait!\nDon\u0026rsquo;t get too excited!\nThis score only measures a set of automated accessibility audit tests.\nIt\u0026rsquo;s still necessary to perform manual accessibility testing, which uses keyboard, visual, and cognitive tests to find issues that automated tools cannot.\nFortunately, there\u0026rsquo;s plenty of resources online.\nAnd, if you still need help you can reach out to a web accessibility expert like me!\n","permalink":"https://RajDuggal.com/articles/free-web-accessibility-audit/","summary":"You don\u0026rsquo;t need to download or install any special software. Both Chrome and the Edge browsers have a built-in web accessibility auditing tool, ready for you to use!","title":"How to Run a Quick, Simple and Free, Web Accessibility Test Audit"},{"content":"In software development, deciding which features hold the most value can significantly impact the success of a product. However, identifying these “prized” features involves more than simply compiling a list of nice-to-have functionalities. It requires a deep understanding of the software\u0026rsquo;s intended goals, its users, and the context in which it operates. This article explores how to decide what the most prized features are and who should be responsible for making those decisions.\nDeciding the Most Prized Features When determining the most valuable software features, it’s essential to recognize that different features bring different types of benefits. Some features save users time, others provide more accurate or timely information, and some unlock access to new, previously unavailable data. These diverse outcomes should be carefully considered in order to assess the value each feature brings to the table.\nTime-Saving Features: These aim to reduce manual effort, making workflows more efficient. Accuracy-Enhancing Features: These improve the quality and precision of the data used within the system. Information-Unlocking Features: These allow users to access new insights, providing a competitive advantage or solving previously unmet needs. Furthermore, features can be categorized into two broad types:\nEnhancements: These improve or augment existing functionalities. Necessary Features: These address critical gaps in the current system that could lead to issues if not addressed. Understanding the context of the software and its impact on the users’ overall experience will help differentiate between what’s “nice to have” versus what’s critical. Asking questions like, \u0026ldquo;What is the impact of not having this feature?\u0026rdquo; can be instrumental in determining its true value. For example, if a feature saves time but its absence won’t severely affect users, it may not be a high priority. Conversely, if a missing feature leads to significant operational inefficiencies or lost business, it becomes much more important.\nWho Decides What the Most Prized Features Are? The responsibility for deciding which features are most valuable often falls to the Product Owner. The Product Owner’s role is to gather input from various stakeholders, including end-users, developers, and business leaders, and prioritize features accordingly.\nDifferent types of users have different concerns and priorities. For example:\nA customer service representative might prize features that help them resolve issues faster. A manager might prefer features that improve reporting and decision-making. A developer might prioritize features that fix technical debt or improve system reliability. To make the best decision, the Product Owner needs to gather feedback from all these perspectives and evaluate how each feature impacts the user experience, business goals, and technical stability. This is where prioritizing based on the feature\u0026rsquo;s potential value, compared to the current system, becomes crucial. The value of a new feature is measured by what it brings to the system that wasn’t there before, especially in terms of improving efficiency, accuracy, or overall user satisfaction.\nEnhancement vs. Necessity It\u0026rsquo;s important to distinguish between features that enhance the user experience and those that are essential for the software to function. Enhancement features, like a more intuitive user interface or additional reporting options, improve usability and satisfaction but aren\u0026rsquo;t critical for the software\u0026rsquo;s core operations. Necessary features, on the other hand, are those that the software cannot do without—for example, security features that protect user data or compliance features that meet legal requirements.\nLooking Beyond Software: Interim Solutions It’s important to remember that not every feature requires an immediate software-based solution. In some cases, the benefits provided by a feature might be achievable through manual processes in the interim. For instance, instead of building a custom interface for users to change their address, the software could simply display a message: \u0026ldquo;If your address changes, please send us an email.\u0026rdquo; A support team member could then manually update the database, eliminating the need to build an interface right away.\nThis approach allows teams to assess whether the cost and time required to build a feature are justified. If a manual workaround is sufficient, it might not be necessary to develop the feature at all—or at least not immediately. The question to ask is, \u0026ldquo;Can we provide a reasonable, cost-effective solution through a manual process for now?\u0026rdquo; If the answer is yes, the feature may not be as “prized” as initially thought.\nMitigation Plans and Manual Workarounds It’s common for development teams to assume all requested features are necessary without considering alternative solutions. However, when deciding if a feature is truly essential, it’s helpful to explore mitigation plans. Could an employee make the necessary change manually? If so, the need to build a custom user interface may be reduced.\nFor example, instead of building an automated system for users to update their details, it may be sufficient to allow users to submit updates via email, where technical support staff can manually update the information. This reduces the need for immediate, costly feature development.\nThe Role of the Product Owner The Product Owner plays a pivotal role in deciding which features to prioritize. They are responsible for maintaining the product backlog—a prioritized list of features and improvements. By understanding the needs of the stakeholders and the users, the Product Owner can make informed decisions about which features will deliver the most value.\nDeveloper Input and Low-Cost “Band-Aid” Features Developers also play an important role in identifying features that might not be immediately visible to the Product Owner. For instance, if a bug could result in database inconsistencies, developers could propose low-cost, “band-aid” features as interim solutions.\nConsider a scenario where the system can cause a user\u0026rsquo;s age to be recorded as a negative value if the database goes down. The development team might suggest a script that runs hourly to check for negative age values and sends an alert to the support team, rather than working on building the complete fix right away.\nConclusion Identifying the most prized software features is a complex process that involves understanding the needs of the users, the priorities of the stakeholders, and the cost and benefits of each potential feature. By considering interim solutions, the impact of not having a feature, and the real-world value that each feature brings, teams can make more informed decisions and prioritize features that truly make a difference.\n","permalink":"https://RajDuggal.com/articles/the-most-prized-software-features/","summary":"How to Identify the Most Prized Software Features","title":"Identifying the Most Prized Software Features For Maximum Impact"},{"content":"For many software development projects, it’s not uncommon for teams to realize midway through that they’re going to miss the expected launch date, and that costs are likely to exceed the original budget. This situation creates a ripple effect of risks, frustrations, and financial challenges. In the world of software development, estimating timelines and budgets accurately is an ongoing struggle, but the Agile approach offers a way to mitigate budget risks while delivering valuable results.\nWhy Software Development is Difficult to Estimate Software development is notoriously difficult to estimate. The complexity of projects, unforeseen challenges, and evolving requirements all make it nearly impossible to predict the exact time and cost required to deliver a complete product. Every software project has its unique intricacies—there might be hidden technical debt, unanticipated dependencies, or new insights that only emerge once development is underway.\nBecause of this, traditional fixed-scope, fixed-budget approaches often fail. Teams may spend months building features that turn out to be unnecessary, or they may encounter unexpected obstacles that cause delays. This is where the Agile methodology becomes incredibly valuable.\nHow Agile Helps Manage Budget Risks The Agile approach isn’t about completing a project strictly within a pre-defined budget or timeline. Instead, it emphasizes iterative development, continuous learning, and the ability to make informed decisions as the project progresses. Agile focuses on delivering working software incrementally, which helps manage budget risks by allowing teams to learn and adapt as they go.\nWhen using Agile, teams start delivering functional software early and often. This gives stakeholders tangible value from the beginning and lets them assess whether further investment is worthwhile. By the time a team reaches the halfway point, they aren’t left with a pile of incomplete work. Instead, they have usable, valuable software that can already bring ROI to the business.\nBudgeting in Agile: A Flexible Approach One of the key differences in Agile budgeting is that it treats the budget as a guideline rather than a hard limit. The focus is not on whether the entire project will be completed within the budget, but whether the software being developed provides enough value to justify continued investment.\nAs the team delivers increments of the software and learns more about its functionality and how users are leveraging it, stakeholders can make informed decisions about whether to continue funding development. If there’s still a positive ROI to be gained, stakeholders might decide to extend the budget to build more features and extract even more value from the software.\nThis flexible approach to budgeting helps reduce the negative risks of running out of resources before delivering anything usable. Instead, the Agile process ensures that valuable software is being released incrementally, with each release providing business value. The customer can then evaluate the ROI of each new feature and decide whether it’s worth continuing investment.\nFocus on Business Value and Risk Management Agile teams focus on minimizing budget risks by delivering value early and frequently. The goal is to extract the maximum business value from each release, rather than rushing to finish the project on time or under budget. This mindset shift allows for a more strategic approach to managing resources and priorities.\nInstead of seeing the project as something to be completed as quickly and cheaply as possible, Agile encourages teams to think about how each increment of work contributes to the overall business objectives. Are the features being built actually valuable? Will they provide a return on investment? If the answer is yes, continuing development may be the best course of action—even if it means extending the timeline or increasing the budget.\nConclusion Managing budget risks in software development requires flexibility, adaptability, and a focus on delivering business value. The Agile approach provides a way to do this by delivering working software in small increments, allowing teams to adjust their priorities and resources based on real-world results.\nInstead of being trapped by rigid budgets and timelines, Agile gives teams the freedom to continuously assess whether further development is worth the investment. This ensures that budget risks are minimized and that the software being developed always provides maximum value to the business.\n","permalink":"https://RajDuggal.com/articles/managing-budget-risks/","summary":"Leveraging Agile to Mitigate Budget Overruns and Maximize Business Value","title":"Managing Budget Risks"}]